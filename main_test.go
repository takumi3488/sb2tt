package main

import (
	"reflect"
	"testing"
	"time"
)

func TestParse(t *testing.T) {
	tests := []struct {
		n string
		c string
		e []Schedule
		d string
	}{
		{
			n: "同年",
			c: `12/06（日）10:00 - 19:00
- セブンイレブン
12/08（火）10:00 - 19:00
- セブンイレブン
12/09（水）10:00 - 19:00
- セブンイレブン

シフト管理アプリ「シフトボード」で作成`,
			e: []Schedule{
				{"セブンイレブン", "2022-12-06T10:00:00.000Z", "2022-12-06T19:00:00.000Z"},
				{"セブンイレブン", "2022-12-08T10:00:00.000Z", "2022-12-08T19:00:00.000Z"},
				{"セブンイレブン", "2022-12-09T10:00:00.000Z", "2022-12-09T19:00:00.000Z"},
			},
			d: "",
		},
		{
			n: "来年",
			c: `01/06（日）10:00 - 19:00
- セブンイレブン
01/08（火）10:00 - 19:00
- セブンイレブン
01/09（水）10:00 - 19:00
- セブンイレブン

シフト管理アプリ「シフトボード」で作成`,
			e: []Schedule{
				{"セブンイレブン", "2023-01-06T10:00:00.000Z", "2023-01-06T19:00:00.000Z"},
				{"セブンイレブン", "2023-01-08T10:00:00.000Z", "2023-01-08T19:00:00.000Z"},
				{"セブンイレブン", "2023-01-09T10:00:00.000Z", "2023-01-09T19:00:00.000Z"},
			},
			d: "",
		},
		{
			n: "デフォルト値タイトル",
			c: `12/06（日）10:00 - 19:00
12/08（火）10:00 - 19:00
12/09（水）10:00 - 19:00

シフト管理アプリ「シフトボード」で作成`,
			e: []Schedule{
				{"ファミリーマート", "2022-12-06T10:00:00.000Z", "2022-12-06T19:00:00.000Z"},
				{"ファミリーマート", "2022-12-08T10:00:00.000Z", "2022-12-08T19:00:00.000Z"},
				{"ファミリーマート", "2022-12-09T10:00:00.000Z", "2022-12-09T19:00:00.000Z"},
			},
			d: "ファミリーマート",
		},
		{
			n: "デフォルト値があっても指定されたタイトルを優先",
			c: `12/06（日）10:00 - 19:00
- セブンイレブン
12/08（火）10:00 - 19:00
- セブンイレブン
12/09（水）10:00 - 19:00
- セブンイレブン

シフト管理アプリ「シフトボード」で作成`,
			e: []Schedule{
				{"セブンイレブン", "2022-12-06T10:00:00.000Z", "2022-12-06T19:00:00.000Z"},
				{"セブンイレブン", "2022-12-08T10:00:00.000Z", "2022-12-08T19:00:00.000Z"},
				{"セブンイレブン", "2022-12-09T10:00:00.000Z", "2022-12-09T19:00:00.000Z"},
			},
			d: "セブンイレブン",
		},
	}
	now := time.Date(2022,12,1,0,0,0,0,time.Local)
	for _, test := range tests {
		t.Run(test.n, func(t *testing.T) {
			if got,_ := parse(test.c,test.d,now); !reflect.DeepEqual(got, test.e) {
				t.Errorf("got: %v\nexpected: %v", got, test.e)
			}
		})
	}
}
